This is a cloud computing project seeking to follow a posted beer menu on the Gravity Storm Brewing Cooperative website.  The entire system is serverless, scalable, and automated.  The functionalities used are described here.  I would like to scale this process to process many websites to produce interesting updates to email subscribers.

Process Overview:
1. Triggering Lambda: Lambda can be triggered on-demand or at regular intervals (e.g., via a CloudWatch Event or an API call). In this case, it is set up to run on demand.
2. Web Scraping: The Lambda function fetches the current beer menu from the website via an HTTP request and parses the returned JSON data.
3. Change Detection: It compares the fetched data with the previously stored version to check for any changes.
4. Notification via SNS: If a change is detected, the Lambda function publishes a message to the SNS topic.
5. Email Subscription: SNS sends the message to all subscribed email addresses.

AWS Lambda is a serverless computing service that lets you run code in response to events without a server. It automatically scales based on the number of requests. I used Lambda to create a lambda function that performs the web scraping task of fetching the beer menu and detecting changes. This Lambda function is also responsible for triggering SNS notifications.

AWS SNS (Simple Notification Service) is a fully managed messaging service that allows you to send notifications to subscribers via various channels (e.g., email, SMS, etc.). It can handle a large number of requests and subscribers. I created an SNS Topic that will send messages (in our case, the beer menu or a notification about a change in the menu).  I set up an email subscription to this SNS topic that is handled through Lambda.

AWS IAM (Identity and Access Management) is used to securely control access to AWS services and resources. You create and manage AWS users, groups, and permissions. I created IAM Roles and attached policies to allow the lambda function to publish messages to the SNS topic. These permissions were necessary for the Lambda function to interact with SNS. I configured the necessary permissions for SNS so that only the right entities (such as Lambda) could publish to the topic.

Amazon S3 (Simple Storage Service; optional for storing past menu data) is a storage service that allows you to store and retrieve data.  As an optional feature, I wrote S3 to store previous beer menu versions to detect changes. It can also be used to directly compare the fetched beer menu data without storing it in S3.

AWS CloudWatch provides monitoring for AWS resources and applications, and it can capture logs and metrics from Lambda functions and other services. I used these to monitor and troubleshoot the Lambda function. These logs help us understand how it is performing, check for errors, and track its execution.

Notes on Web Scraping with Python (Requests and JSON): I used Python to fetch the beer menu data from the website. This was done using the requests library to send HTTP requests and parse the JSON data returned by the site. Then I wrote the web scraping code inside the Lambda function, making HTTP requests to fetch the beer menu and process the returned JSON data. The Lambda function compares the fetched data with the previous data to detect any changes.  I obtained the required layers from https://github.com/keithrozario/Klayers.
